name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Run Rust tests
      run: cargo test --workspace --verbose --exclude langlint_py

    - name: Run clippy
      run: cargo clippy --all-targets --all-features --workspace --exclude langlint_py -- -D warnings
    
    - name: Install maturin
      run: pip install maturin
    
    - name: Build Python bindings with Rust extension
      run: |
        cd crates/langlint_py
        maturin build --release
    
    - name: Install Python dependencies
      run: pip install pytest pytest-cov pytest-timeout click
    
    - name: Install built wheel
      run: pip install target/wheels/langlint-*.whl
    
    - name: Run Python tests with coverage
      run: pytest tests/ --cov=langlint --cov-report=term --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: python
        name: python-${{ matrix.os }}

    # Format check disabled - not critical for CI
    # - name: Check formatting
    #   run: cargo fmt -- --check

  build:
    name: Build Release
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: langlint
            asset_name: langlint-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: langlint.exe
            asset_name: langlint-windows-x86_64.exe
          # macOS build disabled due to PyO3 linking issues
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   artifact_name: langlint
          #   asset_name: langlint-macos-x86_64

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Build release
      run: cargo build --release --locked -p langlint_cli

    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: strip target/release/${{ matrix.artifact_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/release/${{ matrix.artifact_name }}
